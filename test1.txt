<%@ Page Language="VB" validateRequest="false" aspcompat="true"%>

<%@ Import Namespace="System.Net" %>
<%@ Import Namespace = "System.Web" %>
<%@ Import Namespace = "System.Web.Security" %>
<%@ Import Namespace = "System.Security.Principal" %>
<%@ Import Namespace = "System.Runtime.InteropServices" %>
<%@ Import Namespace = "System.Web.UI.WebControls" %>
<%@ Import Namespace = "System.Diagnostics" %>
<%@ Import Namespace = "System.IO" %>
<%@ import Namespace = "System.Threading" %>

<script runat="server">


Public Declare Function NetShareEnum Lib "Netapi32.dll" ( _
	<MarshalAs(UnmanagedType.LPWStr)> ByVal servername As String, _
	ByVal level As Integer, _
	ByRef bufptr As IntPtr, _
	ByVal prefmaxlen As Integer, _
	ByRef entriesread As Integer, _
	ByRef totalentries As Integer, _
	ByRef resume_handle As Integer) As Integer

Private Declare Function NetApiBufferFree Lib "netapi32.dll" ( _
    ByVal buffer As Integer) As Integer

Dim  ERROR_ACCESS_DENIED as Integer = 5

Dim  NO_ERROR  as Integer = 0


<Flags>
Public Enum ShareType
    Disk = 0
    Printer = 1
    Device = 2
    IPC = 3
    Special = -2147483648
End Enum
<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>
Protected Structure SHARE_INFO_1
	<MarshalAs(UnmanagedType.LPWStr)>
	Public NetName As String
	Public ShareType As ShareType
	<MarshalAs(UnmanagedType.LPWStr)>
	Public Remark As String
End Structure
<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)>
Protected Structure SHARE_INFO_2
    <MarshalAs(UnmanagedType.LPWStr)>
    Public NetName As String
    Public ShareType As ShareType
    <MarshalAs(UnmanagedType.LPWStr)>
    Public Remark As String
    Public Permissions As Integer
    Public MaxUsers As Integer
    Public CurrentUsers As Integer
    <MarshalAs(UnmanagedType.LPWStr)>
    Public Path As String
    <MarshalAs(UnmanagedType.LPWStr)>
    Public Password As String
End Structure
</script>
<%

 Dim level As Integer = 2
 Dim server="MISC"
    Dim entriesRead, totalEntries, nRet As Integer, hResume As Integer = 0
    Dim pBuffer As IntPtr = IntPtr.Zero

    Try
        nRet = NetShareEnum(server, level, pBuffer, -1, entriesRead, totalEntries, hResume)

        If ERROR_ACCESS_DENIED = nRet Then
            level = 1
            nRet = NetShareEnum(server, level, pBuffer, -1, entriesRead, totalEntries, hResume)
        End If 
        If NO_ERROR = nRet AndAlso entriesRead > 0 Then
            Dim t As Type = If((2 = level), GetType(SHARE_INFO_2), GetType(SHARE_INFO_1))
            Dim offset As Integer = Marshal.SizeOf(t)
            Dim i As Integer = 0
			Dim tmpBuffer As IntPtr = IntPtr.Zero
		 
			While i < totalEntries
			
			     If 1 = level Then
				 
					Dim sizeofINFO As Integer = Marshal.SizeOf(GetType(SHARE_INFO_1))
					
					If Environment.Is64BitProcess Then
						tmpBuffer = New IntPtr(pBuffer.ToInt64 + (i * sizeofINFO)) 
					Else
						tmpBuffer = New IntPtr(pBuffer.ToInt32 + (i * sizeofINFO)) 
					End If
                    Dim si As SHARE_INFO_1 =  Marshal.PtrToStructure(tmpBuffer, GetType(SHARE_INFO_1))
                    'shares.Add(si.NetName, String.Empty, si.ShareType, si.Remark)
					Response.Write(si.NetName)
					Response.Write("<br>")
					Response.Write(si.ShareType)
                Else
					Dim sizeofINFO As Integer = Marshal.SizeOf(GetType(SHARE_INFO_2))
					If Environment.Is64BitProcess Then
						tmpBuffer = New IntPtr(pBuffer.ToInt64 + (i * sizeofINFO)) 
					Else
						tmpBuffer = New IntPtr(pBuffer.ToInt32 + (i * sizeofINFO)) 
					End If
                    Dim si As SHARE_INFO_2 =  Marshal.PtrToStructure(tmpBuffer, GetType(SHARE_INFO_2))
                    'shares.Add(si.NetName, si.Path, si.ShareType, si.Remark)
					Response.Write(si.NetName)
					Response.Write("<br>")
					Response.Write(si.ShareType)
                End If
				System.Math.Max(System.Threading.Interlocked.Increment(i), i - 1)
			End While
           
        End If

	Catch ex As Exception
		Response.Write(ex.tostring)
    End Try
%>
